from __future__ import print_function

import numpy
import json
from keras.preprocessing import sequence
from keras.models import Sequential
from keras.layers import Dense, Embedding
from keras.layers import LSTM
from keras.utils.np_utils import to_categorical

numpy.random.seed(3)
OOV_CHAR = 2
max_features = 2800
maxlen = 500
batch_size = 25
epochs = 10
validation_split=0.2

print("Loading dataset")
filename = r'Dataset\Personality Prediction\Keras\status_fb.json'
jsonFile = open(filename).read()
f = json.loads(jsonFile)
data = (f['X_train'])
labels = (f['Y_train']['conscientiousness'])
for i in range(0, len(data)):
    for j in range(0, len(data[i])):
        if (data[i][j] >= max_features):
            data[i][j] = OOV_CHAR

print("Padding sequences")
data = sequence.pad_sequences(data, maxlen=maxlen)
labels = to_categorical(labels)

print("Splitting train/test")
indices = numpy.arange(250)
numpy.random.shuffle(indices)
data = data[indices]
labels = labels[indices]
val_sample = int(validation_split * len(data))

x_train = data[:-val_sample]
y_train = labels[:-val_sample]
x_test = data[-val_sample:]
y_test = labels[-val_sample:]

print("Creating model")
# LSTM
model = Sequential()
model.add(Embedding(max_features, 32, input_length=maxlen))
model.add(LSTM(32, dropout=0.2, recurrent_dropout=0.2))
model.add(Dense(2, activation='softmax'))

print("Compiling model")
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
# print (model.summary())

print("Training model")
model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=epochs, batch_size=batch_size, verbose=2)

print("\nEvaluating model")
scores = model.evaluate(x_train, y_train, verbose=0)
print("%s: %f%%" % (model.metrics_names[0], scores[0]))
print("%s: %.2f%%" % (model.metrics_names[1], scores[1]*100))
predictions = model.predict(x_test)
predicted = []
for x in predictions:
    if(x[0] > x[1]): predicted.append(0)
    else: predicted.append(1)
print(predicted)